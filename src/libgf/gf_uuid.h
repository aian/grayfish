/*-
 * This file is part of Grayfish project. For license details, see the file
 * 'LICENSE.md' in this package.
 */
/*!
** @file libgf/gf_uuid.h
** @brief UUID operations
*/
#ifndef LIBGF_GF_UUID_H
#define LIBGF_GF_UUID_H

#pragma once

#include <libgf/config.h>

#include <libgf/gf_datatype.h>
#include <libgf/gf_error.h>

#if __cplusplus
extern "C" {
#endif

struct gf_uuid {
  unsigned long  data_1;
  unsigned short data_2;
  unsigned short data_3;
  unsigned char  data_4[8];
};

typedef struct gf_uuid gf_uuid;

/*!
** @brief Initialize the UUID data structure
**
** @param [out] uuid The UUID object to be initialized
*/

extern gf_status gf_uuid_init(gf_uuid* uuid);

/*!
** @brief Generate a new UUID.
**
** @param [out] uuid The new UUID object.
*/

extern gf_status gf_uuid_generate(gf_uuid* uuid);

/*!
** @brief Generate a new UUID.
**
** @param [in] uuid_1 The UUID object 1.
** @param [in] uuid_2 The UUID object 2.
**
** @return Returns positive value if uuid_1 is greater than uuid_2 and negative
** value if uuid_2 is greater. If uuid_1 equals to uuid_2 then it returns zero.
*/

extern int gf_uuid_compare(const gf_uuid* uuid_1, const gf_uuid* uuid_2);

/*!
** @brief Max length of UUID in string representation.
**
** The length of the UUID string, which is generated by the function
** gf_uuid_get_string() is fixed size. The format of that string is as follows:
**
**   {fb2c64e5-5c4a-40f1-9717-2b8c19f286e0}
**
** This macro constant represents the length of the UUID string including NUL
** character.
*/

#define GF_UUID_MAX 39

extern gf_status gf_uuid_get_string(char* str, size_t len, const gf_uuid* uuid);

/*!
** @brief Parse string as a UUID string.
**
** @param [out] uuid The UUID object
** @param [in]  str  The string to be parsed
**
** @return GF_SUCCESS on success, GF_E_* otherwise
*/

extern gf_status gf_uuid_parse(gf_uuid* uuid, const char* str);

/* -------------------------------------------------------------------------- */

typedef struct gf_uuid_array gf_uuid_array;

typedef void (*gf_uuid_free_fn)(gf_uuid* uuid);

extern gf_status gf_uuid_array_new(gf_uuid_array** ary);

extern void gf_uuid_array_free(gf_uuid_array* ary);

extern gf_status gf_uuid_array_clear(gf_uuid_array* ary);

extern gf_status gf_uuid_array_set_free_fn(gf_uuid_array* ary, gf_uuid_free_fn fn);

extern gf_status gf_uuid_array_add(const gf_uuid_array* ary, gf_uuid* uuid);

extern gf_size_t gf_uuid_array_count(const gf_uuid_array* ary);

extern gf_bool gf_uuid_array_is_valid_index(const gf_uuid_array* ary, gf_size_t index);

extern gf_status gf_uuid_array_get(gf_uuid_array* ary, gf_size_t index, gf_uuid **uuid);
  
extern gf_status gf_uuid_array_find(gf_uuid_array* ary, const gf_uuid *key, gf_uuid **uuid);

#if __cplusplus
}
#endif

#endif  /* LIBGF_GF_UUID_H */
